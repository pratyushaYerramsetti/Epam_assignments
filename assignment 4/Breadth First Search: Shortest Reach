import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
class Node{
    int d;
    int node;
    Node(int node,int d){
        this.d = d;
        this.node = node;
    }
}
public class Solution {

    // Complete the bfs function below.
    static int[] bfs(int n, int m, int[][] edges, int s) {
        ArrayList<ArrayList<Integer>> list= new ArrayList<>();
        for(int i=0;i<=n;i++){
            list.add(new ArrayList<Integer>());
        }
        for(int i =0;i<edges.length;i++){
            int src = edges[i][0];
            int des = edges[i][1];
            list.get(src).add(des);
            list.get(des).add(src);
        }
        Queue<Node> q = new LinkedList<>();
        int dist[] = new int[n+1];
        for(int i=0;i<=n;i++)
            dist[i] = -1;
       // dist[s] = 0;    
       boolean[] vis = new boolean[n+1];
       q.add(new Node(s,0));
       vis[s] = true;
       while(!q.isEmpty()){
           Node temp = q.poll();
           dist[temp.node] = temp.d;
           for(int h:list.get(temp.node)){
               if(!vis[h]){
                   q.add(new Node(h,temp.d+6));
                   vis[h] = true;
               }
           }
       }
       int ans[] = new int[n-1];
       int ind =0;
       for(int  i=1;i<=n;i++){
            if(i!=s){
                ans[ind++] = dist[i];
            }
       }
       return(ans);
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0]);

            int m = Integer.parseInt(nm[1]);

            int[][] edges = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] edgesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowItems[j]);
                    edges[i][j] = edgesItem;
                }
            }

            int s = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] result = bfs(n, m, edges, s);

            for (int i = 0; i < result.length; i++) {
                bufferedWriter.write(String.valueOf(result[i]));

                if (i != result.length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
